import { z } from 'zod';
import { JsonValueSchema } from '../inputTypeSchemas/JsonValueSchema'
import { InboxTypeSchema } from '../inputTypeSchemas/InboxTypeSchema'
import { InboxStatusSchema } from '../inputTypeSchemas/InboxStatusSchema'
import { StorageLocationSchema } from '../inputTypeSchemas/StorageLocationSchema'
import { InboxAccessLevelSchema } from '../inputTypeSchemas/InboxAccessLevelSchema'
import { InboxClassificationSchema } from '../inputTypeSchemas/InboxClassificationSchema'
import { RetentionPolicySchema } from '../inputTypeSchemas/RetentionPolicySchema'

/////////////////////////////////////////
// INBOX SCHEMA
/////////////////////////////////////////

export const InboxSchema = z.object({
  type: InboxTypeSchema.nullish(),
  status: InboxStatusSchema,
  storageLocation: StorageLocationSchema,
  accessLevel: InboxAccessLevelSchema,
  classification: InboxClassificationSchema,
  retentionPolicy: RetentionPolicySchema,
  id: z.string().cuid(),
  name: z.string(),
  originalName: z.string().nullish(),
  description: z.string().nullish(),
  fileName: z.string().nullish(),
  filePath: z.string().nullish(),
  fileUrl: z.string().nullish(),
  fileHash: z.string().nullish(),
  fileType: z.string().nullish(),
  fileExtension: z.string().nullish(),
  size: z.number().int().nullish(),
  contentType: z.string().nullish(),
  checksum: z.string().nullish(),
  compression: z.string().nullish(),
  virusScanStatus: z.string().nullish(),
  virusScanDate: z.coerce.date().nullish(),
  securityFlags: JsonValueSchema.nullable(),
  accessAttempts: JsonValueSchema.nullable(),
  lastSecurityAudit: z.coerce.date().nullish(),
  encryptionMethod: z.string().nullish(),
  encryptionKeyId: z.string().nullish(),
  digitalSignature: z.string().nullish(),
  certificateId: z.string().nullish(),
  folderId: z.string().nullish(),
  path: z.string().nullish(),
  tags: JsonValueSchema.nullable(),
  starred: z.boolean(),
  pinned: z.boolean(),
  sortOrder: z.number().int().nullish(),
  displayOrder: z.number().int().nullish(),
  password: z.string().nullish(),
  encryptionKey: z.string().nullish(),
  shareableLink: z.string().nullish(),
  accessCount: z.number().int(),
  maxAccessCount: z.number().int().nullish(),
  accessHistory: JsonValueSchema.nullable(),
  ipRestrictions: JsonValueSchema.nullable(),
  allowedDomains: JsonValueSchema.nullable(),
  geoRestrictions: JsonValueSchema.nullable(),
  retentionDate: z.coerce.date().nullish(),
  legalHold: z.boolean(),
  dispositionDate: z.coerce.date().nullish(),
  archiveDate: z.coerce.date().nullish(),
  purgeDate: z.coerce.date().nullish(),
  amount: z.number().nullish(),
  baseAmount: z.number().nullish(),
  baseCurrency: z.string().nullish(),
  currency: z.string().nullish(),
  exchangeRate: z.number().nullish(),
  taxAmount: z.number().nullish(),
  totalAmount: z.number().nullish(),
  date: z.coerce.date().nullish(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  lastAccessedAt: z.coerce.date().nullish(),
  expiresAt: z.coerce.date().nullish(),
  effectiveDate: z.coerce.date().nullish(),
  lastValidated: z.coerce.date().nullish(),
  lastBackupDate: z.coerce.date().nullish(),
  processingStatus: z.string().nullish(),
  processingErrors: z.string().nullish(),
  retryCount: z.number().int(),
  maxRetries: z.number().int(),
  workflow: z.string().nullish(),
  approvalStatus: z.string().nullish(),
  approvedBy: z.string().nullish(),
  approvedAt: z.coerce.date().nullish(),
  rejectionReason: z.string().nullish(),
  nextReviewDate: z.coerce.date().nullish(),
  ocrText: z.string().nullish(),
  ocrLanguage: z.string().nullish(),
  ocrConfidence: z.number().nullish(),
  ocrEngine: z.string().nullish(),
  analysisResults: JsonValueSchema.nullable(),
  metadata: JsonValueSchema.nullable(),
  contentHash: z.string().nullish(),
  contentAnalysis: JsonValueSchema.nullable(),
  aiTags: JsonValueSchema.nullable(),
  customMetadata: JsonValueSchema.nullable(),
  version: z.number().int(),
  versionNotes: z.string().nullish(),
  parentVersion: z.string().nullish(),
  isLatestVersion: z.boolean(),
  versionHistory: JsonValueSchema.nullable(),
  changeLog: JsonValueSchema.nullable(),
  branchName: z.string().nullish(),
  mergeHistory: JsonValueSchema.nullable(),
  forwardedTo: z.string().nullish(),
  forwardedBy: z.string().nullish(),
  forwardedAt: z.coerce.date().nullish(),
  sharedWith: JsonValueSchema.nullable(),
  collaborators: JsonValueSchema.nullable(),
  lockHolder: z.string().nullish(),
  lockExpiresAt: z.coerce.date().nullish(),
  lastModifiedBy: z.string().nullish(),
  referenceId: z.string().nullish(),
  referenceType: z.string().nullish(),
  sourceSystem: z.string().nullish(),
  externalLinks: JsonValueSchema.nullable(),
  dependencies: JsonValueSchema.nullable(),
  relatedFiles: JsonValueSchema.nullable(),
  projectId: z.string(),
  createdById: z.string().nullish(),
  ownerId: z.string().nullish(),
  lastModifiedById: z.string().nullish(),
  attachmentId: z.string().nullish(),
  transactionId: z.string().nullish(),
  complianceStatus: z.string().nullish(),
  complianceTags: JsonValueSchema.nullable(),
  dataPrivacyLevel: z.string().nullish(),
  regulatoryFlags: JsonValueSchema.nullable(),
  auditTrail: JsonValueSchema.nullable(),
  backupStatus: z.string().nullish(),
  lastBackupId: z.string().nullish(),
  recoveryPoint: z.string().nullish(),
  backupLocation: z.string().nullish(),
})

export type Inbox = z.infer<typeof InboxSchema>

/////////////////////////////////////////
// INBOX OPTIONAL DEFAULTS SCHEMA
/////////////////////////////////////////

export const InboxOptionalDefaultsSchema = InboxSchema.merge(z.object({
  status: InboxStatusSchema.optional(),
  storageLocation: StorageLocationSchema.optional(),
  accessLevel: InboxAccessLevelSchema.optional(),
  classification: InboxClassificationSchema.optional(),
  retentionPolicy: RetentionPolicySchema.optional(),
  id: z.string().cuid().optional(),
  starred: z.boolean().optional(),
  pinned: z.boolean().optional(),
  accessCount: z.number().int().optional(),
  legalHold: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  retryCount: z.number().int().optional(),
  maxRetries: z.number().int().optional(),
  version: z.number().int().optional(),
  isLatestVersion: z.boolean().optional(),
}))

export type InboxOptionalDefaults = z.infer<typeof InboxOptionalDefaultsSchema>

export default InboxSchema;
