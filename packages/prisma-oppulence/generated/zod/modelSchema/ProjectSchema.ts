import { z } from 'zod';
import { AdminRoleSchema } from '../inputTypeSchemas/AdminRoleSchema'
import { OrganizationSizeSchema } from '../inputTypeSchemas/OrganizationSizeSchema'

/////////////////////////////////////////
// PROJECT SCHEMA
/////////////////////////////////////////

export const ProjectSchema = z.object({
  adminRole: AdminRoleSchema.nullish(),
  organizationSize: OrganizationSizeSchema.nullish(),
  id: z.string().cuid(),
  name: z.string(),
  slug: z.string(),
  logo: z.string().nullish(),
  inviteCode: z.string().nullish(),
  plan: z.string(),
  stripeId: z.string().nullish(),
  billingCycleStart: z.number().int(),
  paymentFailedAt: z.coerce.date().nullish(),
  stripeConnectId: z.string().nullish(),
  payoutMethodId: z.string().nullish(),
  shopifyStoreId: z.string().nullish(),
  invoicePrefix: z.string().nullish(),
  reason: z.string().nullish(),
  usage: z.number().int(),
  usageLimit: z.number().int(),
  linksUsage: z.number().int(),
  linksLimit: z.number().int(),
  salesUsage: z.number().int(),
  salesLimit: z.number().int(),
  domainsLimit: z.number().int(),
  tagsLimit: z.number().int(),
  usersLimit: z.number().int(),
  aiUsage: z.number().int(),
  aiLimit: z.number().int(),
  transactionCategoriesLimit: z.number().int(),
  bankConnectionsUsage: z.number().int(),
  bankConnectionsLimit: z.number().int(),
  bankAccountsUsage: z.number().int(),
  bankAccountsLimit: z.number().int(),
  documentsUsage: z.number().int(),
  documentsLimit: z.number().int(),
  documentStorageUsage: z.number().int(),
  documentStorageLimit: z.number().int(),
  contractTemplatesUsage: z.number().int(),
  contractTemplatesLimit: z.number().int(),
  activeContractsUsage: z.number().int(),
  activeContractsLimit: z.number().int(),
  invoiceTemplatesUsage: z.number().int(),
  invoiceTemplatesLimit: z.number().int(),
  monthlyInvoicesUsage: z.number().int(),
  monthlyInvoicesLimit: z.number().int(),
  customersUsage: z.number().int(),
  customersLimit: z.number().int(),
  customerTagsUsage: z.number().int(),
  customerTagsLimit: z.number().int(),
  reportsUsage: z.number().int(),
  reportsLimit: z.number().int(),
  reportStorageUsage: z.number().int(),
  reportStorageLimit: z.number().int(),
  apiRequestsUsage: z.number().int(),
  apiRequestsLimit: z.number().int(),
  webhooksUsage: z.number().int(),
  webhooksLimit: z.number().int(),
  integrationsUsage: z.number().int(),
  integrationsLimit: z.number().int(),
  apiTokensUsage: z.number().int(),
  apiTokensLimit: z.number().int(),
  teamMembersUsage: z.number().int(),
  teamMembersLimit: z.number().int(),
  auditLogRetention: z.number().int(),
  referralLinkId: z.string().nullish(),
  referredSignups: z.number().int(),
  webhookEnabled: z.boolean(),
  conversionEnabled: z.boolean(),
  partnersEnabled: z.boolean(),
  ssoEnabled: z.boolean(),
  dotLinkClaimed: z.boolean(),
  createdAt: z.coerce.date(),
  updatedAt: z.coerce.date(),
  usageLastChecked: z.coerce.date(),
})

export type Project = z.infer<typeof ProjectSchema>

/////////////////////////////////////////
// PROJECT OPTIONAL DEFAULTS SCHEMA
/////////////////////////////////////////

export const ProjectOptionalDefaultsSchema = ProjectSchema.merge(z.object({
  id: z.string().cuid().optional(),
  plan: z.string().optional(),
  usage: z.number().int().optional(),
  usageLimit: z.number().int().optional(),
  linksUsage: z.number().int().optional(),
  linksLimit: z.number().int().optional(),
  salesUsage: z.number().int().optional(),
  salesLimit: z.number().int().optional(),
  domainsLimit: z.number().int().optional(),
  tagsLimit: z.number().int().optional(),
  usersLimit: z.number().int().optional(),
  aiUsage: z.number().int().optional(),
  aiLimit: z.number().int().optional(),
  transactionCategoriesLimit: z.number().int().optional(),
  bankConnectionsUsage: z.number().int().optional(),
  bankConnectionsLimit: z.number().int().optional(),
  bankAccountsUsage: z.number().int().optional(),
  bankAccountsLimit: z.number().int().optional(),
  documentsUsage: z.number().int().optional(),
  documentsLimit: z.number().int().optional(),
  documentStorageUsage: z.number().int().optional(),
  documentStorageLimit: z.number().int().optional(),
  contractTemplatesUsage: z.number().int().optional(),
  contractTemplatesLimit: z.number().int().optional(),
  activeContractsUsage: z.number().int().optional(),
  activeContractsLimit: z.number().int().optional(),
  invoiceTemplatesUsage: z.number().int().optional(),
  invoiceTemplatesLimit: z.number().int().optional(),
  monthlyInvoicesUsage: z.number().int().optional(),
  monthlyInvoicesLimit: z.number().int().optional(),
  customersUsage: z.number().int().optional(),
  customersLimit: z.number().int().optional(),
  customerTagsUsage: z.number().int().optional(),
  customerTagsLimit: z.number().int().optional(),
  reportsUsage: z.number().int().optional(),
  reportsLimit: z.number().int().optional(),
  reportStorageUsage: z.number().int().optional(),
  reportStorageLimit: z.number().int().optional(),
  apiRequestsUsage: z.number().int().optional(),
  apiRequestsLimit: z.number().int().optional(),
  webhooksUsage: z.number().int().optional(),
  webhooksLimit: z.number().int().optional(),
  integrationsUsage: z.number().int().optional(),
  integrationsLimit: z.number().int().optional(),
  apiTokensUsage: z.number().int().optional(),
  apiTokensLimit: z.number().int().optional(),
  teamMembersUsage: z.number().int().optional(),
  teamMembersLimit: z.number().int().optional(),
  auditLogRetention: z.number().int().optional(),
  referredSignups: z.number().int().optional(),
  webhookEnabled: z.boolean().optional(),
  conversionEnabled: z.boolean().optional(),
  partnersEnabled: z.boolean().optional(),
  ssoEnabled: z.boolean().optional(),
  dotLinkClaimed: z.boolean().optional(),
  createdAt: z.coerce.date().optional(),
  updatedAt: z.coerce.date().optional(),
  usageLastChecked: z.coerce.date().optional(),
}))

export type ProjectOptionalDefaults = z.infer<typeof ProjectOptionalDefaultsSchema>

export default ProjectSchema;
