enum ReportType {
  contract
  customer
  transaction
  financial
  compliance
  analytics
  audit
  performance
}

enum ReportFormat {
  pdf
  csv
  excel
  json
  html
}

enum ReportStatus {
  queued
  generating
  completed
  failed
  expired
}

enum FilterOperator {
  equals
  notEquals
  contains
  notContains
  greaterThan
  lessThan
  greaterThanOrEqual
  lessThanOrEqual
  between
  in
  notIn
  isNull
  isNotNull
}

enum SortDirection {
  asc
  desc
}

model Report {
  id            String       @id @default(cuid())
  name          String       // Report name
  description   String?      @db.Text
  type          ReportType
  format        ReportFormat @default(pdf)
  status        ReportStatus @default(queued)

  // Time Range
  from          DateTime?
  to            DateTime?
  timeZone      String?      @default("UTC")

  // Report Output
  fileUrl       String?      // Generated report URL
  fileSize      Int?        // Size in bytes
  pageCount     Int?        // For PDF reports
  rowCount      Int?        // For data reports

  // Report Settings
  currency      String?      // For financial data
  language      String?      @default("en")
  template      String?      // Report template ID/name
  watermark     Boolean      @default(false)
  isScheduled   Boolean      @default(false)

  // Access Control
  visibility    String       @default("private") // private, team, public
  password      String?      // Optional password protection

  // Distribution
  shareUrl      String?      // Public sharing URL
  shortLink     String?      // Short URL for sharing
  downloadCount Int          @default(0)
  viewCount     Int          @default(0)

  // Processing
  processingTime Int?        // Time taken to generate (ms)
  lastError      String?     @db.Text
  retryCount     Int         @default(0)

  // Timestamps
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  expireAt      DateTime?    // When the report expires
  lastAccessedAt DateTime?   // Last viewed/downloaded
  scheduledAt   DateTime?    // Next scheduled generation
  completedAt   DateTime?    // When generation completed

  // Relations
  createdBy     String?      // User who created the report
  creator       User?        @relation(fields: [createdBy], references: [id])
  projectId     String?      // Project the report belongs to
  project       Project?     @relation(fields: [projectId], references: [id])

  // Structured Relations
  filters       ReportFilter[]
  sortings      ReportSorting[]
  columns       ReportColumn[]
  schedules     ReportSchedule[]
  recipients    ReportRecipient[]
  accessUsers   ReportAccess[]

  @@index([projectId])
  @@index([createdBy])
  @@index([type])
  @@index([status])
  @@index([createdAt])
  @@index([expireAt])
  @@index([scheduledAt])
}

model ReportFilter {
  id          String         @id @default(cuid())
  reportId    String
  field       String         // Field to filter on
  operator    FilterOperator
  value       String        // Serialized filter value
  valueType   String        // Type of the value (number, string, date, etc.)
  group       String?       // For grouped filters
  position    Int          // Order in the filter chain

  report      Report        @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
}

model ReportSorting {
  id          String        @id @default(cuid())
  reportId    String
  field       String        // Field to sort by
  direction   SortDirection
  position    Int          // Order in the sort chain

  report      Report       @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
}

model ReportColumn {
  id          String    @id @default(cuid())
  reportId    String
  field       String    // Field to display
  label       String?   // Custom label for the column
  width       Int?      // Column width
  position    Int      // Order of columns
  isVisible   Boolean   @default(true)
  format      String?   // Display format

  report      Report    @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
}

model ReportSchedule {
  id          String    @id @default(cuid())
  reportId    String
  frequency   String    // daily, weekly, monthly, etc.
  dayOfWeek   Int?      // 0-6 for weekly
  dayOfMonth  Int?      // 1-31 for monthly
  hour        Int      // 0-23
  minute      Int      // 0-59
  isActive    Boolean   @default(true)
  lastRun     DateTime?
  nextRun     DateTime?

  report      Report    @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
}

model ReportRecipient {
  id          String    @id @default(cuid())
  reportId    String
  email       String
  name        String?
  type        String    // to, cc, bcc
  isActive    Boolean   @default(true)

  report      Report    @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@index([reportId])
  @@index([email])
}

model ReportAccess {
  id          String    @id @default(cuid())
  reportId    String
  userId      String
  accessType  String    // view, edit, admin

  report      Report    @relation(fields: [reportId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reportId, userId])
  @@index([reportId])
  @@index([userId])
}
