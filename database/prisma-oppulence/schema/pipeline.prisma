// Deal Status
enum DealStatus {
  active
  won
  lost
  abandoned
  delayed
}

// Deal Priority
enum DealPriority {
  low
  medium
  high
  critical
}

// Pipeline Types
enum PipelineType {
  sales
  recruitment
  project
  custom
}

// Task Status & Priority for Deals
enum DealTaskStatus {
  pending
  in_progress
  completed
  canceled
}

enum DealTaskPriority {
  low
  medium
  high
  urgent
}

// Activity Type
enum DealActivityType {
  call
  email
  meeting
  note
  other
}

// Competitor Status & Threat (optional)
enum DealCompetitorStatus {
  active
  won
  lost
  evaluating
}

enum DealCompetitorThreatLevel {
  high
  medium
  low
}

// Optional marketing channel enumeration
enum MarketingChannel {
  referral
  inbound
  outbound
  partner
  event
  direct
  online_ad
  social_media
  other
}

// Additional Enums
enum AutomationTriggerType {
  stage_entry
  stage_exit
  deal_value_change
  probability_change
  task_completion
  activity_creation
  custom
}

enum AutomationActionType {
  notify_user
  update_field
  create_task
  send_email
  webhook
  custom
}

enum KpiType {
  revenue
  conversion_rate
  cycle_time
  deal_velocity
  win_rate
  custom
}

enum IntegrationType {
  crm
  email
  calendar
  chat
  document
  analytics
  custom
}

enum CustomFieldType {
  text
  number
  date
  boolean
  select
  multi_select
  user
  currency
}

enum AccessLevel {
  none
  read
  write
  admin
}

enum TeamMemberRole {
  owner
  manager
  member
  viewer
  custom
}

model Pipeline {
  id                String        @id @default(cuid())
  name              String
  // Optionally store a unique slug/key for easier referencing in external systems or user-friendly URLs
  slug              String?       @unique
  description       String?       @db.Text
  type              PipelineType  @default(custom)
  isActive          Boolean       @default(true)
  isDefault         Boolean       @default(false)
  icon              String?       // Icon identifier
  color             String?       @default("blue") // Color code
  // Pipeline Configuration
  currency          String        @default("USD")
  defaultStageId    String?       // Default stage for new deals
  // Extended/Enriched Fields
  pipelineFocus     String?       // e.g. "Expand existing accounts", "Acquire new customers"
  pipelineSegment   String?       // e.g. "SMB", "Enterprise"
  pipelineCategory  String?       // e.g. "B2B", "B2C", "E-commerce"
  pipelineGoal      Float?        // e.g. revenue goal or KPI target
  typicalSalesCycle Int?          // e.g. average days from creation to close
  averageDealSize   Float?        // e.g. average $ value in pipeline
  averageCloseRate  Float?        // e.g. historical close % for deals in this pipeline
  // New Fields
  minimumDealSize   Float?        // Minimum acceptable deal size
  maximumDealSize   Float?        // Maximum deal size limit
  targetMarket      String?       // Target market description
  salesMethodology  String?       // e.g., "Solution Selling", "SPIN", "Challenger"
  qualificationCriteria String?   @db.Text // Deal qualification criteria
  
  // Forecasting and Analytics
  forecastingMethod String?       // e.g., "Linear", "Moving Average", "ML-based"
  confidenceScore   Float?        // Pipeline health score
  revenueTarget     Float?        // Period revenue target
  dealCountTarget   Int?          // Period deal count target
  
  // Compliance and Security
  complianceLevel   String?       // Required compliance level
  securityTier      String?       // Security classification
  dataRetention     Int?          // Data retention period in days
  
  // Visibility and Access
  visibilityLevel   String?       // Public, Private, Team
  // Ownership & Project
  projectId         String
  project           Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy         String?       // User ID
  updatedBy         String?       // User ID
  // Timestamps
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  archivedAt        DateTime?     // Soft-delete/archiving
  // Relations
  stages            PipelineStage[]
  deals             Deal[]
  kpis              PipelineKpi[]
  automations       PipelineAutomation[]
  stageDurations    StageDuration[]
  integrations      PipelineIntegration[]
  accessRules       PipelineAccessRule[]
  @@index([projectId])
}

// Stage Duration Settings
model StageDuration {
  id              String    @id @default(cuid())
  pipelineId      String
  stageId         String    @unique  // Added @unique for one-to-one relation
  expectedDays    Int
  warningDays     Int?      // Alert after X days
  criticalDays    Int?      // Critical after X days
  
  // Relations
  pipeline        Pipeline  @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  stage           PipelineStage @relation(fields: [stageId], references: [id], onDelete: Cascade)
  @@unique([pipelineId, stageId])
  @@index([pipelineId])
  @@index([stageId])
}

// Pipeline Integrations
model PipelineIntegration {
  id              String          @id @default(cuid())
  pipelineId      String
  type            IntegrationType
  name            String
  provider        String
  config          String          @db.Text  // Encrypted configuration
  isActive        Boolean         @default(true)
  lastSyncedAt    DateTime?
  
  // Relations
  pipeline        Pipeline        @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  @@index([pipelineId])
}

// Pipeline Access Rules
model PipelineAccessRule {
  id              String      @id @default(cuid())
  pipelineId      String
  roleId          String?     // Optional role-based access
  userId          String?     // Optional user-based access
  teamId          String?     // Optional team-based access
  accessLevel     AccessLevel
  conditions      AccessRuleCondition[]
  
  // Relations
  pipeline        Pipeline    @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  @@index([pipelineId])
}

// Access Rule Conditions
model AccessRuleCondition {
  id              String    @id @default(cuid())
  ruleId          String
  field           String    // Field to check
  operator        String    // e.g., "equals", "contains", "gt", "lt"
  value           String    // Condition value
  
  // Relations
  rule            PipelineAccessRule @relation(fields: [ruleId], references: [id], onDelete: Cascade)
  @@index([ruleId])
}

// Pipeline Stages
model PipelineStage {
  id              String    @id @default(cuid())
  pipelineId      String
  name            String
  description     String?   @db.Text
  order           Int       // Stage order in pipeline
  probability     Float?    // Win probability percentage
  color           String?   // Color code
  icon            String?   // Icon identifier
  // Stage Configuration
  isDefault       Boolean   @default(false)
  isFinal         Boolean   @default(false)
  isWon           Boolean   @default(false)
  isLost          Boolean   @default(false)
  // Automation
  autoMoveAfterDays Int?    // Auto-move deal after X days
  nextStageId      String?  // Default next stage
  // Relations
  pipeline        Pipeline  @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  deals           Deal[]    // Deals in this stage
  requiredFields  StageRequiredField[]
  stageDuration   StageDuration?
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  @@unique([pipelineId, order])
  @@index([pipelineId])
}

// Stage Required Fields
model StageRequiredField {
  id              String    @id @default(cuid())
  stageId         String
  fieldName       String
  errorMessage    String?
  
  // Relations
  stage           PipelineStage @relation(fields: [stageId], references: [id], onDelete: Cascade)
  @@unique([stageId, fieldName])
  @@index([stageId])
}

// Deals
model Deal {
  id                String          @id @default(cuid())
  name              String
  description       String?         @db.Text
  pipelineId        String
  stageId           String
  leadId            String?         // Optional lead association
  // Deal Details
  status            DealStatus      @default(active)
  priority          DealPriority    @default(medium)
  value             Float           // Deal value
  currency          String          @default("USD")
  probability       Float?          // Win probability %
  expectedRevenue   Float?          // value * probability
  // Additional Strategic & Financial Data
  dealCategory      String?         // e.g. "New Business", "Expansion", "Renewal"
  dealFocus         String?         // e.g. "Key Strategic Account", "SMB", etc.
  synergyPotential  Float?          // e.g. synergy rating from 0-100
  synergyDescription String?        @db.Text
  complianceCheck   Boolean?        // e.g. did we run a compliance check?
  complianceNotes   String?         @db.Text
  estimatedProfitMargin Float?      // e.g. a computed margin in %
  discountReason    String?         // e.g. discount justification
  closingStrategy   String?         // e.g. "Solution Selling", "Value-based", "Challenger"
  
  // Marketing & Lead Data
  marketingChannel  MarketingChannel? // e.g. inbound, outbound, referral, etc.
  leadRating        String?         // e.g. "A", "B", "C" or "hot", "warm", "cold"
  // Timing
  startDate         DateTime?
  closeDate         DateTime?       // Expected/Actual close date
  actualCloseDate   DateTime?       // When deal was actually closed
  // Deal Progress
  progress          Int             @default(0)  // Progress percentage
  reason            String?         // Win/Loss reason
  notes             String?         @db.Text     // Internal notes
  // Ownership & Relations
  assignedToId      String?         // Assigned user ID
  assignedTo        User?           @relation(fields: [assignedToId], references: [id])
  projectId         String
  project           Project         @relation(fields: [projectId], references: [id])
  pipeline          Pipeline        @relation(fields: [pipelineId], references: [id])
  stage             PipelineStage   @relation(fields: [stageId], references: [id])
  lead              Lead?           @relation(fields: [leadId], references: [id])
  // Extended Relations
  activities        DealActivity[]
  products          DealProduct[]
  competitors       DealCompetitor[]
  attachments       Document[]
  tasks             DealTask[]
  history           DealHistory[]
  // Timestamps
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  archivedAt        DateTime?       // Soft-delete/archiving
  // Audit
  createdBy         String?         // User ID
  updatedBy         String?         // User ID
  @@index([pipelineId])
  @@index([stageId])
  @@index([leadId])
  @@index([projectId])
  @@index([assignedToId])
}

// Deal Activities
model DealActivity {
  id              String           @id @default(cuid())
  dealId          String
  type            DealActivityType // call, email, meeting, note, etc.
  title           String
  description     String?          @db.Text
  outcome         String?
  duration        Int?             // In minutes
  scheduledAt     DateTime?
  completedAt     DateTime?
  // Relations
  deal            Deal             @relation(fields: [dealId], references: [id], onDelete: Cascade)
  // Audit
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  createdBy       String?          // User ID
  @@index([dealId])
}

// Deal Products
model DealProduct {
  id              String    @id @default(cuid())
  dealId          String
  productId       String    // Reference to product catalog
  quantity        Int       @default(1)
  unitPrice       Float
  discount        Float?
  total           Float     // Ideally calculated (quantity * unitPrice - discount)
  description     String?   @db.Text
  // Relations
  deal            Deal      @relation(fields: [dealId], references: [id], onDelete: Cascade)
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  @@index([dealId])
}

// Deal Competitors
model DealCompetitor {
  id              String                  @id @default(cuid())
  dealId          String
  name            String
  strengths       String?                 @db.Text
  weaknesses      String?                 @db.Text
  strategy        String?                 @db.Text
  status          DealCompetitorStatus?   // optional enum
  threatLevel     DealCompetitorThreatLevel?  // optional enum
  // Relations
  deal            Deal                    @relation(fields: [dealId], references: [id], onDelete: Cascade)
  // Timestamps
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  @@index([dealId])
}

// Deal Tasks
model DealTask {
  id              String            @id @default(cuid())
  dealId          String
  title           String
  description     String?           @db.Text
  dueDate         DateTime?
  priority        DealTaskPriority? @default(medium)
  status          DealTaskStatus    @default(pending)
  completedAt     DateTime?
  // Relations
  deal            Deal              @relation(fields: [dealId], references: [id], onDelete: Cascade)
  assignedToId    String?
  assignedTo      User?             @relation(fields: [assignedToId], references: [id])
  // Timestamps
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  @@index([dealId])
  @@index([assignedToId])
}

// Deal History
model DealHistory {
  id              String    @id @default(cuid())
  dealId          String
  field           String    // Which field changed
  oldValue        String?   @db.Text
  newValue        String?   @db.Text
  description     String?   @db.Text
  // Relations
  deal            Deal      @relation(fields: [dealId], references: [id], onDelete: Cascade)
  // Audit
  createdAt       DateTime  @default(now())
  createdBy       String?   // User ID
  @@index([dealId])
}

enum PipelineKpiFrequency {
  daily
  weekly
  monthly
}

enum PipelineKpiCalculation {
  formula
  calculation
}

enum PipelineKpiUnit {
  currency
  percentage
  days
  other
}

// Pipeline KPIs
model PipelineKpi {
  id              String    @id @default(cuid())
  pipelineId      String
  name            String
  type            KpiType
  target          Float
  current         Float?
  unit            PipelineKpiUnit
  description     String?   @db.Text
  frequency       PipelineKpiFrequency
  calculation     PipelineKpiCalculation
  formula         String?   @db.Text // Formula or calculation method
  
  // Relations
  pipeline        Pipeline  @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  // Timestamps
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  @@index([pipelineId])
}

// Pipeline Automations
model PipelineAutomation {
  id              String              @id @default(cuid())
  pipelineId      String
  name            String
  description     String?             @db.Text
  isActive        Boolean             @default(true)
  triggerType     AutomationTriggerType
  actionType      AutomationActionType
  priority        Int                 @default(0)
  
  // Relations
  pipeline        Pipeline            @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
  triggers        AutomationTrigger[]
  actions         AutomationAction[]
  conditions      AutomationCondition[]
  // Timestamps
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  lastTriggered   DateTime?
  @@index([pipelineId])
}

// Automation Triggers
model AutomationTrigger {
  id              String    @id @default(cuid())
  automationId    String
  field           String    // Field to monitor
  operator        String    // Comparison operator
  value           String    // Value to compare against
  
  // Relations
  automation      PipelineAutomation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  @@index([automationId])
}

// Automation Actions
model AutomationAction {
  id              String    @id @default(cuid())
  automationId    String
  field           String    // Field to update
  value           String    // New value
  template        String?   @db.Text  // For email/notification templates
  
  // Relations
  automation      PipelineAutomation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  @@index([automationId])
}

// Automation Conditions
model AutomationCondition {
  id              String    @id @default(cuid())
  automationId    String
  field           String    // Field to check
  operator        String    // Comparison operator
  value           String    // Value to compare against
  
  // Relations
  automation      PipelineAutomation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  @@index([automationId])
}