// Budget Planning and Tracking
model LeadBudget {
  id                String    @id @default(cuid())
  leadId            String    @unique
  lead              Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)
  
  // Budget Details
  totalBudget       Float
  allocatedBudget   Float
  remainingBudget   Float
  spentBudget       Float     @default(0)
  
  // Budget Breakdown
  productCost       Float     @default(0)
  serviceCost       Float     @default(0)
  implementationCost Float    @default(0)
  maintenanceCost   Float     @default(0)
  
  // Budget Timeline
  fiscalYear        Int
  quarterlyBreakdown Json     // Quarterly budget allocation
  monthlyBreakdown  Json     // Monthly budget allocation
  
  // Budget Status
  status            BudgetStatus @default(DRAFT)
  approvalStatus    ApprovalStatus @default(PENDING)
  approvedBy        String?
  approvedAt        DateTime?
  
  // Budget History
  revisions         LeadBudgetRevision[]
  expenses          LeadBudgetExpense[]
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@index([leadId])
}

enum BudgetStatus {
  DRAFT
  ACTIVE
  UNDER_REVIEW
  APPROVED
  REJECTED
  CLOSED
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  REQUIRES_CHANGES
}

model LeadBudgetRevision {
  id                String    @id @default(cuid())
  budgetId          String
  budget            LeadBudget @relation(fields: [budgetId], references: [id])
  previousAmount    Float
  newAmount         Float
  reason            String    @db.Text
  approvedBy        String?
  createdAt         DateTime  @default(now())
  
  @@index([budgetId])
}

model LeadBudgetExpense {
  id                String    @id @default(cuid())
  budgetId          String
  budget            LeadBudget @relation(fields: [budgetId], references: [id])
  amount            Float
  category          String
  description       String    @db.Text
  receipt           String?   // URL to receipt document
  expenseDate       DateTime
  createdAt         DateTime  @default(now())
  
  @@index([budgetId])
}

enum RequirementPriority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum RequirementStatus {
  DRAFT
  IN_REVIEW
  APPROVED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

// Product Fit Analysis
model LeadProductFit {
  id                String    @id @default(cuid())
  leadId            String    @unique
  lead              Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)
  
  // Overall Fit Scores
  technicalFit      Float     // 0-100
  businessFit       Float     // 0-100
  culturalFit       Float     // 0-100
  budgetFit         Float     // 0-100
  overallFit        Float     // 0-100
  
  // Detailed Analysis
  strengthsWeaknesses Json    // Array of pros/cons
  customizationNeeds Json     // Required customizations
  implementationComplexity String
  
  // Product Requirements
  requiredFeatures  Json      // Must-have features
  optionalFeatures  Json      // Nice-to-have features
  dealBreakers      Json      // Non-negotiable requirements
  
  // Integration Assessment
  integrationComplexity String
  integrationRisks  Json
  integrationCosts  Float?
  
  // Timeline Assessment
  implementationTimeline Json
  trainingNeeds     Json
  
  // Analysis History
  assessments       LeadProductFitAssessment[]
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@index([leadId])
}

model LeadProductFitAssessment {
  id                String    @id @default(cuid())
  productFitId      String
  productFit        LeadProductFit @relation(fields: [productFitId], references: [id])
  assessor          String    // User ID
  scores            Json      // Detailed scoring breakdown
  notes             String    @db.Text
  createdAt         DateTime  @default(now())
  
  @@index([productFitId])
}

// Customer Segmentation
model LeadSegmentation {
  id                String    @id @default(cuid())
  leadId            String    @unique
  lead              Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)
  
  // Demographic Segmentation
  industrySegment   String
  companySize       String
  geographicRegion  String
  
  // Behavioral Segmentation
  purchaseHistory   Json?
  productUsage      Json?
  engagementLevel   String
  
  // Psychographic Segmentation
  decisionMaking    String
  innovationLevel   String
  riskTolerance     String
  
  // Value Segmentation
  customerLifetimeValue Float?
  profitabilitySegment String
  growthPotential   String
  
  // Custom Segments
  segmentTags      String   // Store as comma-separated string instead of array
  
  // Analysis
  segmentationHistory LeadSegmentationHistory[]
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@index([leadId])
}

model LeadSegmentationHistory {
  id                String    @id @default(cuid())
  segmentationId    String
  segmentation      LeadSegmentation @relation(fields: [segmentationId], references: [id])
  previousSegments  Json
  newSegments       Json
  reason            String    @db.Text
  createdAt         DateTime  @default(now())
  
  @@index([segmentationId])
}

// Feedback Tracking
model LeadFeedback {
  id                String    @id @default(cuid())
  leadId            String
  lead              Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)
  
  // Feedback Details
  type              FeedbackType
  source            String
  content           String    @db.Text
  sentiment         String    // POSITIVE, NEGATIVE, NEUTRAL
  score             Float?    // Numerical rating if applicable
  
  // Categories
  category          String
  subCategory       String?
  tags              String?
  
  // Follow-up
  requiresFollowUp  Boolean   @default(false)
  followUpAssignee  String?
  followUpStatus    String?
  followUpNotes     String?   @db.Text
  
  // Resolution
  status            FeedbackStatus @default(OPEN)
  resolution        String?   @db.Text
  resolvedBy        String?
  resolvedAt        DateTime?
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@index([leadId])
}

enum FeedbackType {
  SURVEY
  DIRECT
  SOCIAL
  REVIEW
  SUPPORT_TICKET
  OTHER
}

enum FeedbackStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  REOPENED
}

// Lead Nurturing
model LeadNurturing {
  id                String    @id @default(cuid())
  leadId            String    @unique
  lead              Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)
  
  // Nurture Program
  program           String
  stage             String
  status            NurtureStatus @default(ACTIVE)
  
  // Content Engagement
  contentViewed     Json?    // Array of content interactions
  emailsOpened      Json?    // Array of email interactions
  websiteVisits     Json?    // Array of website visits
  
  // Engagement Metrics
  engagementScore   Float     @default(0)
  responseRate      Float     @default(0)
  lastEngagement    DateTime?
  
  // Nurture Journey
  currentStep       Int       @default(1)
  completedSteps    Json?
  nextActions       Json?
  
  // Automation
  automationFlows   Json?    // Active automation workflows
  triggers          Json?    // Engagement triggers
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@index([leadId])
}

enum NurtureStatus {
  ACTIVE
  PAUSED
  COMPLETED
  FAILED
}

// Compliance Tracking
model LeadComplianceAudit {
  id                String    @id @default(cuid())
  leadId            String
  lead              Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)
  
  // Audit Details
  type              ComplianceType
  status            ComplianceStatus @default(PENDING)
  findings          String?   @db.Text
  
  // Requirements
  requirements      Json      // Compliance requirements
  documentation     Json      // Required documentation
  evidences         Json      // Compliance evidences
  
  // Risk Assessment
  riskLevel         String
  riskFactors       Json
  mitigationSteps   Json
  
  // Review
  reviewedBy        String?
  reviewedAt        DateTime?
  nextReviewDate    DateTime?
  
  // History
  auditHistory      LeadComplianceHistory[]
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@index([leadId])
}

enum ComplianceType {
  GDPR
  HIPAA
  SOX
  PCI
  CCPA
  CUSTOM
}

enum ComplianceStatus {
  PENDING
  IN_PROGRESS
  COMPLIANT
  NON_COMPLIANT
  REQUIRES_ACTION
}

model LeadComplianceHistory {
  id                String    @id @default(cuid())
  complianceAuditId String
  complianceAudit   LeadComplianceAudit @relation(fields: [complianceAuditId], references: [id])
  action            String
  status            String
  notes             String    @db.Text
  performedBy       String
  createdAt         DateTime  @default(now())
  
  @@index([complianceAuditId])
}

// Competitive Analysis
model LeadCompetitiveAnalysis {
  id                String    @id @default(cuid())
  leadId            String    @unique
  lead              Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)
  
  // Overall Analysis
  competitiveLandscape Json   // Market positioning
  ourStrengths      Json     // Our competitive advantages
  ourWeaknesses     Json     // Areas for improvement
  
  // Competitor Analysis
  competitors       Json      // Detailed competitor profiles
  competitorProducts Json     // Competitor product analysis
  competitorPricing Json     // Pricing comparison
  
  // Strategy
  winStrategy       String    @db.Text
  differentiators   Json     // Key differentiating factors
  responseStrategy  Json     // Response to competitor actions
  
  // Risk Analysis
  competitiveRisks  Json     // Potential competitive threats
  marketThreats     Json     // Market-level threats
  mitigationPlans   Json     // Risk mitigation strategies
  
  // Updates
  lastUpdated       DateTime
  nextReviewDate    DateTime
  
  // History
  analysisHistory   LeadCompetitiveHistory[]
  
  // Timestamps
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  @@index([leadId])
}

model LeadCompetitiveHistory {
  id                String    @id @default(cuid())
  analysisId        String
  analysis          LeadCompetitiveAnalysis @relation(fields: [analysisId], references: [id])
  changes           Json      // What changed in the analysis
  reason            String    @db.Text
  createdBy         String
  createdAt         DateTime  @default(now())
  
  @@index([analysisId])
}