import type { Prisma } from '@prisma/client'

import { z } from 'zod'
import { SortOrderSchema } from './SortOrderSchema'

export const BankAccountMaxOrderByAggregateInputSchema: z.ZodType<Prisma.BankAccountMaxOrderByAggregateInput> = z
    .object({
        id: z.lazy(() => SortOrderSchema).optional(),
        accountId: z.lazy(() => SortOrderSchema).optional(),
        accountReference: z.lazy(() => SortOrderSchema).optional(),
        accountNumber: z.lazy(() => SortOrderSchema).optional(),
        routingNumber: z.lazy(() => SortOrderSchema).optional(),
        mask: z.lazy(() => SortOrderSchema).optional(),
        name: z.lazy(() => SortOrderSchema).optional(),
        officialName: z.lazy(() => SortOrderSchema).optional(),
        displayName: z.lazy(() => SortOrderSchema).optional(),
        description: z.lazy(() => SortOrderSchema).optional(),
        type: z.lazy(() => SortOrderSchema).optional(),
        subtype: z.lazy(() => SortOrderSchema).optional(),
        ownershipType: z.lazy(() => SortOrderSchema).optional(),
        purpose: z.lazy(() => SortOrderSchema).optional(),
        balance: z.lazy(() => SortOrderSchema).optional(),
        baseBalance: z.lazy(() => SortOrderSchema).optional(),
        availableBalance: z.lazy(() => SortOrderSchema).optional(),
        pendingBalance: z.lazy(() => SortOrderSchema).optional(),
        creditLimit: z.lazy(() => SortOrderSchema).optional(),
        minBalance: z.lazy(() => SortOrderSchema).optional(),
        targetBalance: z.lazy(() => SortOrderSchema).optional(),
        overdraftLimit: z.lazy(() => SortOrderSchema).optional(),
        interestRate: z.lazy(() => SortOrderSchema).optional(),
        currency: z.lazy(() => SortOrderSchema).optional(),
        baseCurrency: z.lazy(() => SortOrderSchema).optional(),
        exchangeRate: z.lazy(() => SortOrderSchema).optional(),
        exchangeRateTimestamp: z.lazy(() => SortOrderSchema).optional(),
        enabled: z.lazy(() => SortOrderSchema).optional(),
        hidden: z.lazy(() => SortOrderSchema).optional(),
        favorite: z.lazy(() => SortOrderSchema).optional(),
        manual: z.lazy(() => SortOrderSchema).optional(),
        verified: z.lazy(() => SortOrderSchema).optional(),
        frozen: z.lazy(() => SortOrderSchema).optional(),
        closeDate: z.lazy(() => SortOrderSchema).optional(),
        spendingLimit: z.lazy(() => SortOrderSchema).optional(),
        dailyLimit: z.lazy(() => SortOrderSchema).optional(),
        monthlyLimit: z.lazy(() => SortOrderSchema).optional(),
        requiresApproval: z.lazy(() => SortOrderSchema).optional(),
        approvalThreshold: z.lazy(() => SortOrderSchema).optional(),
        status: z.lazy(() => SortOrderSchema).optional(),
        errorDetails: z.lazy(() => SortOrderSchema).optional(),
        errorRetries: z.lazy(() => SortOrderSchema).optional(),
        lastSyncAt: z.lazy(() => SortOrderSchema).optional(),
        nextSyncAt: z.lazy(() => SortOrderSchema).optional(),
        errorCount: z.lazy(() => SortOrderSchema).optional(),
        lastErrorAt: z.lazy(() => SortOrderSchema).optional(),
        riskLevel: z.lazy(() => SortOrderSchema).optional(),
        complianceStatus: z.lazy(() => SortOrderSchema).optional(),
        lastReviewDate: z.lazy(() => SortOrderSchema).optional(),
        nextReviewDate: z.lazy(() => SortOrderSchema).optional(),
        reviewNotes: z.lazy(() => SortOrderSchema).optional(),
        bankConnectionId: z.lazy(() => SortOrderSchema).optional(),
        projectId: z.lazy(() => SortOrderSchema).optional(),
        createdBy: z.lazy(() => SortOrderSchema).optional(),
        createdAt: z.lazy(() => SortOrderSchema).optional(),
        updatedAt: z.lazy(() => SortOrderSchema).optional(),
        lastActivityAt: z.lazy(() => SortOrderSchema).optional()
    })
    .strict()

export default BankAccountMaxOrderByAggregateInputSchema
