#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "${YELLOW}Running pre-commit checks...${NC}"

# Check for uncommitted package-lock.json changes
if git diff --name-only --cached | grep -q "pnpm-lock.yaml"; then
  echo "${YELLOW}⚠️  Detected changes in pnpm-lock.yaml${NC}"
  echo "${YELLOW}Running pnpm install to ensure dependencies are in sync...${NC}"
  pnpm install || exit 1
fi

# Run TypeScript type checking
echo "${YELLOW}Running type check...${NC}"
pnpm type-check || {
  echo "${RED}❌ Type check failed. Please fix TypeScript errors before committing.${NC}"
  exit 1
}

# Run prettier on staged files
echo "${YELLOW}Running prettier...${NC}"
pnpm quick || {
  echo "${RED}❌ Prettier check failed. Please fix formatting issues.${NC}"
  exit 1
}

# Run ESLint on staged files
echo "${YELLOW}Running ESLint...${NC}"
pnpm lint-staged || {
  echo "${RED}❌ ESLint check failed. Please fix linting issues.${NC}"
  exit 1
}

# Run tests related to changed files
echo "${YELLOW}Running tests for changed files...${NC}"
pnpm test:affected || {
  echo "${RED}❌ Tests failed. Please fix failing tests.${NC}"
  exit 1
}

# Check for console.log statements
CONSOLE_LOGS=$(git diff --cached --name-only | grep -E '\.(ts|tsx|js|jsx)$' | xargs grep -l 'console\.log')
if [ -n "$CONSOLE_LOGS" ]; then
  echo "${RED}❌ Found console.log statements in:${NC}"
  echo "$CONSOLE_LOGS"
  echo "${YELLOW}Please remove console.log statements before committing.${NC}"
  exit 1
fi

# Check for debugger statements
DEBUGGER_STATEMENTS=$(git diff --cached --name-only | grep -E '\.(ts|tsx|js|jsx)$' | xargs grep -l 'debugger;')
if [ -n "$DEBUGGER_STATEMENTS" ]; then
  echo "${RED}❌ Found debugger statements in:${NC}"
  echo "$DEBUGGER_STATEMENTS"
  echo "${YELLOW}Please remove debugger statements before committing.${NC}"
  exit 1
fi

# Check for merge conflict markers
MERGE_CONFLICTS=$(git diff --cached --name-only | xargs grep -l '^[<>|=]\{7\}')
if [ -n "$MERGE_CONFLICTS" ]; then
  echo "${RED}❌ Found unresolved merge conflicts in:${NC}"
  echo "$MERGE_CONFLICTS"
  echo "${YELLOW}Please resolve merge conflicts before committing.${NC}"
  exit 1
fi

# Check for large files (>5MB)
MAX_SIZE=$((5 * 1024 * 1024)) # 5MB in bytes
LARGE_FILES=$(git diff --cached --name-only | while read -r file; do
  if [ -f "$file" ]; then
    size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null)
    if [ "$size" -gt "$MAX_SIZE" ]; then
      echo "$file ($((size / 1024 / 1024))MB)"
    fi
  fi
done)
if [ -n "$LARGE_FILES" ]; then
  echo "${RED}❌ Found files larger than 5MB:${NC}"
  echo "$LARGE_FILES"
  echo "${YELLOW}Please remove large files before committing.${NC}"
  exit 1
fi

# Check for sensitive files
SENSITIVE_PATTERNS="\.(env|pem|key|pfx|p12|password|secret)$|^\.env\.|password|secret|credential"
SENSITIVE_FILES=$(git diff --cached --name-only | grep -iE "$SENSITIVE_PATTERNS")
if [ -n "$SENSITIVE_FILES" ]; then
  echo "${RED}❌ Warning: Potentially sensitive files detected:${NC}"
  echo "$SENSITIVE_FILES"
  echo "${YELLOW}Please verify these files should be committed.${NC}"
  read -p "Do you want to proceed with the commit? (y/N) " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit 1
  fi
fi

# Validate Dockerfile syntax if changed
DOCKERFILES=$(git diff --cached --name-only | grep -E 'Dockerfile$|Dockerfile\.')
if [ -n "$DOCKERFILES" ]; then
  echo "${YELLOW}Validating Dockerfiles...${NC}"
  for file in $DOCKERFILES; do
    if ! docker run --rm -i hadolint/hadolint < "$file"; then
      echo "${RED}❌ Dockerfile validation failed for $file${NC}"
      exit 1
    fi
  done
fi

# Validate GitHub Actions workflows if changed
WORKFLOW_FILES=$(git diff --cached --name-only | grep -E '\.github/workflows/.*\.ya?ml$')
if [ -n "$WORKFLOW_FILES" ]; then
  echo "${YELLOW}Validating GitHub Actions workflows...${NC}"
  for file in $WORKFLOW_FILES; do
    if ! pnpm actionlint "$file"; then
      echo "${RED}❌ GitHub Actions workflow validation failed for $file${NC}"
      exit 1
    fi
  done
fi

echo "${GREEN}✅ All pre-commit checks passed!${NC}"
