#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "${YELLOW}Running pre-commit checks...${NC}"

# Function to handle errors
handle_error() {
    echo "${RED}❌ $1${NC}"
    exit 1
}

# Check for uncommitted package-lock.json changes
if git diff --name-only --cached | grep -q "pnpm-lock.yaml"; then
    echo "${YELLOW}⚠️  Detected changes in pnpm-lock.yaml${NC}"
    echo "${YELLOW}Running pnpm install to ensure dependencies are in sync...${NC}"
    pnpm install || handle_error "Failed to install dependencies"
fi

# Only run type-check if TypeScript files have changed
TS_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep -E "\.tsx?$" || true)
if [ -n "$TS_FILES" ]; then
    echo "${YELLOW}TypeScript files changed. Running type check...${NC}"
    # Get the unique directories of changed TS files
    DIRS=$(echo "$TS_FILES" | xargs -n1 dirname | sort -u)
    for dir in $DIRS; do
        # Skip directories under database folder
        if [[ $dir == database/* ]]; then
            echo "${YELLOW}Skipping type check for database directory: $dir${NC}"
            continue
        fi
        # Find the closest package.json
        while [ "$dir" != "." ] && [ ! -f "$dir/package.json" ]; do
            dir=$(dirname "$dir")
        done
        if [ -f "$dir/package.json" ] && [ -f "$dir/tsconfig.json" ]; then
            echo "${YELLOW}Checking types in $dir...${NC}"
            (cd "$dir" && pnpm tsc --noEmit) || handle_error "Type check failed in $dir. Please fix TypeScript errors before committing."
        fi
    done
fi

# Run lint-staged for formatting and linting
echo "${YELLOW}Running lint-staged...${NC}"
pnpm lint-staged || handle_error "Lint-staged failed. Please fix the issues before committing."

# Check for console.log statements in staged files
CONSOLE_LOGS=$(git diff --cached --name-only | grep -E '\.(ts|tsx|js|jsx)$' | xargs grep -l 'console\.log' 2>/dev/null || true)
if [ -n "$CONSOLE_LOGS" ]; then
    echo "${RED}❌ Found console.log statements in:${NC}"
    echo "$CONSOLE_LOGS"
    echo "${YELLOW}Please remove console.log statements before committing.${NC}"
    exit 1
fi

# Check for debugger statements in staged files
DEBUGGER_STATEMENTS=$(git diff --cached --name-only | grep -E '\.(ts|tsx|js|jsx)$' | xargs grep -l 'debugger;' 2>/dev/null || true)
if [ -n "$DEBUGGER_STATEMENTS" ]; then
    echo "${RED}❌ Found debugger statements in:${NC}"
    echo "$DEBUGGER_STATEMENTS"
    echo "${YELLOW}Please remove debugger statements before committing.${NC}"
    exit 1
fi

# Check for merge conflict markers
MERGE_CONFLICTS=$(git diff --cached --name-only | xargs grep -l '^[<>|=]\{7\}' 2>/dev/null || true)
if [ -n "$MERGE_CONFLICTS" ]; then
    echo "${RED}❌ Found unresolved merge conflicts in:${NC}"
    echo "$MERGE_CONFLICTS"
    echo "${YELLOW}Please resolve merge conflicts before committing.${NC}"
    exit 1
fi

# Check for sensitive files
SENSITIVE_PATTERNS="\.(env|pem|key|pfx|p12|password|secret)$|^\.env\.|password|secret|credential"
SENSITIVE_FILES=$(git diff --cached --name-only | grep -iE "$SENSITIVE_PATTERNS" 2>/dev/null || true)
if [ -n "$SENSITIVE_FILES" ]; then
    echo "${RED}❌ Warning: Potentially sensitive files detected:${NC}"
    echo "$SENSITIVE_FILES"
    echo "${YELLOW}Please verify these files should be committed.${NC}"
    read -p "Do you want to proceed with the commit? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi

# Validate Dockerfile syntax if changed
DOCKERFILES=$(git diff --cached --name-only | grep -E 'Dockerfile$|Dockerfile\.' 2>/dev/null || true)
if [ -n "$DOCKERFILES" ]; then
    echo "${YELLOW}Validating Dockerfiles...${NC}"
    for file in $DOCKERFILES; do
        if ! docker run --rm -i hadolint/hadolint < "$file"; then
            handle_error "Dockerfile validation failed for $file"
        fi
    done
fi

# Validate GitHub Actions workflows if changed
WORKFLOW_FILES=$(git diff --cached --name-only | grep -E '\.github/workflows/.*\.ya?ml$' 2>/dev/null || true)
if [ -n "$WORKFLOW_FILES" ]; then
    echo "${YELLOW}Validating GitHub Actions workflows...${NC}"
    for file in $WORKFLOW_FILES; do
        if ! pnpm dlx actionlint "$file"; then
            handle_error "GitHub Actions workflow validation failed for $file"
        fi
    done
fi

echo "${GREEN}✅ All pre-commit checks passed!${NC}"
